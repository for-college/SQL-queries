CREATE DATABASE `homework`; -- Создание БД
USE `homework`; -- Использование БД


CREATE TABLE `worker` ( -- Создание таблицы
    `id` int PRIMARY KEY AUTO_INCREMENT,
    `name` varchar(128) NOT NULL,
    `lastname` varchar(255) NOT NULL,
    `sex` tinyint(1) NOT NULL,
    `post` varchar(255) NOT NULL,
    `salary` decimal(10,2) NOT NULL,
    `experience` decimal(2,1) NOT NULL
);

INSERT INTO `worker` (`id`, `name`, `lastname`, `sex`, `post`, `salary`, `experience`) VALUES -- Вставка данных
    (NULL, 'Семён', 'Окулов', 1, 'Директор', '308883.25', '8'),
    (NULL, 'Василиса', 'Окулова', 0, 'Зам. директора', '260112.21', '8'),
    (NULL, 'Матвей', 'Калькуляторов', 1, 'Старший инженер', '227598.19', '8'),
    (NULL, 'Кирилл', 'Мониторов', 1, 'Старший инженер', '227598.19', '7.5'),
    (NULL, 'Дмитрий', 'Телефонов', 1, 'Старший инженер', '227598.19', '7'),
    (NULL, 'Никита', 'Зайкин', 1, 'Инженер', '162570.14', '6.'),
    (NULL, 'Кирилл', 'Васильков', 1, 'Инженер', '162570.14', '6'),
    (NULL, 'Арина', 'Василькова', 0, 'Инженер', '162570.14', '6'),
    (NULL, 'Виктория', 'Зарядкина', 0, 'Инженер', '162570.14', '6'),
    (NULL, 'Диана', 'Хлюкина', 0, 'Инженер', '162570.14', '5'),
    (NULL, 'Виктория', 'Любова', 0, 'Старший агент техподдержки', '211341.17', '5'),
    (NULL, 'Полина', 'Вершинина', 0, 'Агент техподдержки', '130056.11', '1'),
    (NULL, 'Диана', 'Низкова', 0, 'Агент техподдержки', '130056.11', '2'),
    (NULL, 'Никита', 'Лысоголов', 1, 'Агент техподдержки', '130056.11', '1'),
    (NULL, 'Полина', 'Мониторова', 0, 'Младший инженер', '113799.09', '1'),
    (NULL, 'Дмитрий', 'Вардов', 1, 'Стажёр', '81285.07', '0.5'),
    (NULL, 'Никита', 'Калькулькин', 1, 'Стажёр', '81285.07', '0'),
    (NULL, 'Дмитрий', 'Петров', 1, 'Старший уборщик', '113799.09', '2'),
    (NULL, 'Арина', 'Рюкзакова', 0, 'Уборщик', '65028.05', '1'),
    (NULL, 'Кирилл', 'Пакетов', 1, 'Уборщик', '65028.05', '1'),
    (NULL, 'Ариша', 'Орулькина', 0, 'Уборщик', '115000', '2');


SELECT * FROM `worker` WHERE post LIKE 'Уборщик'; -- Условие. Показать всех уборщиков компании.

SELECT post, SUM(experience) AS 'Опыт работы' FROM `worker` GROUP BY post; -- Группировка. Посчитать суммарный опыт работы различных должностей.

SELECT * FROM `worker` ORDER BY experience DESC; -- Сортировка. Отсортировать сотрудников по их опыту работы (по уменьшению).

SELECT sex, AVG(salary) AS 'ЗП' FROM `worker` WHERE sex = 0 GROUP BY sex; -- Условия с группировкой. Найти среднюю зарплату девушек в компании.

SELECT id AS 'Работник', salary AS 'ЗП', salary * 12 * experience AS 'Заработал за всё вреия' -- Подзапрос. 
                                                                                    -- Выбрать работника, который за всё время работы заработал больше всех.
FROM `worker`
WHERE salary * 12 * experience = (SELECT MAX(salary * 12 * experience) FROM `worker`);

UPDATE `worker` -- Обновление. По условию нескольких столбцов. Поднять ЗП уборщикам на 15%, которые работают больше года.
SET salary = salary * 1.15
WHERE experience > 1 AND post LIKE 'Уборщик';

UPDATE `worker` -- Обновление. Без условий. Поднять всем ЗП на 10%.
SET salary = salary * 1.1;
